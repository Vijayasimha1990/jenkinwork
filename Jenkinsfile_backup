#!groovy

// pipeline config
def javaAgent = 'build && java'

// project config
def commit
def branch
def repo
def uname
def pword
for (aSlave in hudson.model.Hudson.instance.slaves) {
  println('====================');
  println('Name: ' + aSlave.name);
  println('getLabelString: ' + aSlave.getLabelString());
  println('getNumExectutors: ' + aSlave.getNumExecutors());
  println('getRemoteFS: ' + aSlave.getRemoteFS());
  println('getMode: ' + aSlave.getMode());
  println('getRootPath: ' + aSlave.getRootPath());
  println('getDescriptor: ' + aSlave.getDescriptor());
  println('getComputer: ' + aSlave.getComputer());
  println('\tcomputer.isAcceptingTasks: ' + aSlave.getComputer().isAcceptingTasks());
  println('\tcomputer.isLaunchSupported: ' + aSlave.getComputer().isLaunchSupported());
  println('\tcomputer.getConnectTime: ' + aSlave.getComputer().getConnectTime());
  println('\tcomputer.getDemandStartMilliseconds: ' + aSlave.getComputer().getDemandStartMilliseconds());
  println('\tcomputer.isOffline: ' + aSlave.getComputer().isOffline());
  println('\tcomputer.countBusy: ' + aSlave.getComputer().countBusy());
  if (aSlave.name == 'NAME OF NODE TO DELETE') {
  	println('Shutting down node!!!!');
 	aSlave.getComputer().setTemporarilyOffline(true,null);
 	aSlave.getComputer().doDoDelete();
  }
  println('\tcomputer.getLog: ' + aSlave.getComputer().getLog());
  println('\tcomputer.getBuilds: ' + aSlave.getComputer().getBuilds());
}
// pipeline
node(javaAgent) {
		properties([
            [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator',daysToKeepStr: '1', numToKeepStr: '4']],
            parameters([
                    choice(
                            choices: ["test", "production"].join("\n"),
                            defaultValue: 'test',
                            description: 'Couchbase Backup',
                            name: 'couchbaseBackup'
                    )
            ])
    ])
	try {
        stage('Collect info') {
            checkout scm
            branch = env.BRANCH_NAME
            commit = git.getCommitId()
            repo = git.getOriginUrl()
        }
		stage('backup'){
        //we wait two minutes to make sure that the service is up and running
       // sleep 120
			//Fetching credentials for respective environment
			withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'couchbase',
                usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
					uname = env.USERNAME
					pword = env.PASSWORD
			}
			if (params.couchbaseBackup == 'test'){
				pcCouchbase.backup environment:params.couchbaseBackup, deployToMachine: deployMaster,username : uname, password :pword
			}
			if (params.couchbaseBackup == 'production'){
				pcCouchbase.backup environment:params.couchbaseBackup, deployToMachine: deployMaster,username : uname, password :pword
			}
			
		}	
    } catch (def e) {
        currentBuild.result = 'FAILURE'
    }
}
